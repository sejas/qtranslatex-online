{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","content","translations","handleChange","_ref","target","value","newState","qtranslatexExtractor","length","_this","setState","_this$state","this","react_default","a","createElement","className","name","onChange","map","_ref2","index","lang","text","key","toUpperCase","readOnly","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAkFeA,oNA7EbC,MAAQ,CACNC,QAAS,GACTC,aAAc,MAGhBC,aAAe,SAAAC,GAAoC,IAAhBH,EAAgBG,EAAjCC,OAAUC,MACpBC,EAAW,CAAEN,WACbC,EAAeM,IAAqBP,GAC1CM,EAASL,aACPA,GAAgBA,EAAaO,OAAS,EAAIP,EAAe,GAC3DQ,EAAKC,SAASJ,4EAGP,IAAAK,EAC2BC,KAAKb,MAA/BC,EADDW,EACCX,QAASC,EADVU,EACUV,aACjB,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,4CAEFF,EAAAC,EAAAC,cAAA,YAEEF,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,WAASC,UAAU,yBACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,uCAGAH,EAAAC,EAAAC,cAAA,YACEC,UAAU,eACVC,KAAK,SACLZ,MAAOL,EACPkB,SAAUN,KAAKV,iBAMrBW,EAAAC,EAAAC,cAAA,WAASC,UAAU,gBAChBf,EAAakB,IAAI,SAAAC,EAAiBC,GAAU,IAAxBC,EAAwBF,EAAxBE,KAAMC,EAAkBH,EAAlBG,KACzB,OACEV,EAAAC,EAAAC,cAAA,WAASS,IAAKH,EAAOL,UAAU,yBAC7BH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,IAA+BM,EAAKG,eACpCZ,EAAAC,EAAAC,cAAA,YACEV,MAAOkB,EACPP,UAAU,eACVC,KAAK,SACLS,UAAQ,SAOpBb,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVW,KAAK,mBACLvB,OAAO,SACPwB,IAAI,uBAJN,0CAQAf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVW,KAAK,sDACLvB,OAAO,SACPwB,IAAI,uBAJN,wDAhEQC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8801e124.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport qtranslatexExtractor from \"qtranslatex-extractor\"\nimport \"./App.css\"\n\nclass App extends Component {\n  state = {\n    content: \"\",\n    translations: []\n  }\n\n  handleChange = ({ target: { value: content } }) => {\n    const newState = { content }\n    const translations = qtranslatexExtractor(content)\n    newState.translations =\n      translations && translations.length > 0 ? translations : []\n    this.setState(newState)\n  }\n\n  render() {\n    const { content, translations } = this.state\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>QTranslate X Extractor Online</h1>\n        </header>\n        <main>\n          {/* Input */}\n          <section>\n            <article className=\"Viewer Viewer--source\">\n              <h2 className=\"Viewer-title\">\n                Paste your QTranslate Content here:\n              </h2>\n              <textarea\n                className=\"Viewer-input\"\n                name=\"source\"\n                value={content}\n                onChange={this.handleChange}\n              />\n            </article>\n          </section>\n\n          {/* Results */}\n          <section className=\"Translations\">\n            {translations.map(({ lang, text }, index) => {\n              return (\n                <article key={index} className=\"Viewer Viewer--result\">\n                  <h2 className=\"Viewer-title\"> {lang.toUpperCase()}</h2>\n                  <textarea\n                    value={text}\n                    className=\"Viewer-input\"\n                    name=\"result\"\n                    readOnly\n                  />\n                </article>\n              )\n            })}\n          </section>\n        </main>\n        <footer>\n          <a\n            className=\"App-link\"\n            href=\"https://sejas.es\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Developed with â™¥ by Antonio Sejas\n          </a>\n          <br />\n          <a\n            className=\"App-link\"\n            href=\"https://www.npmjs.com/package/qtranslatex-extractor\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            (Using QTranslate Extractor NPM JS Package)\n          </a>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}